// https://get.geojs.io/v1/ip/geo.json
// –∫–∏–Ω—å—Ç–µ fetch –ø–æ –∞–¥—Ä–µ—Å—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —à–∏—Ä–æ—Ç–µ (latitude), –¥–æ–ª–≥–æ—Ç–µ (longitude) –∏ –≥–æ—Ä–æ–¥—É
// —Å–¥–µ–ª–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—è async / await –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// c—Å—ã–ª–∫–∏ –Ω–∞ api –≤ —á–∞—Ç–µ zoom

// ! –¥–æ 10-10

async function getWeather() {
    const res = await fetch("https://get.geojs.io/v1/ip/geo.json");
    const data = await res.json();
    // * —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –±–µ–∑ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏
    // * –æ–±—ä—è–≤–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –ø—Ä–∏—Å–≤–æ–∏–ª–∏ –∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞
    // const city = data.city
    // const latitude = data.latitude
    // const longitude = data.longitude
    // * —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–µ–π
    // –º—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É –æ–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –∏–º–µ–Ω–∞–º–∏ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ —Å –∏–º–µ–Ω–µ–º –Ω—É–∂–Ω—ã—Ö –Ω–∞–º –∫–ª—é—á–µ–π –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const { city, latitude, longitude } = data;
    console.log(city, latitude, longitude);
  }

  // —Å–¥–µ–ª–∞–π—Ç–µ fetch –∑–∞–ø—Ä–æ—Å –ø–æ –∞–¥—Ä–µ—Å—É:
  // https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true
  // –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –≤—ã—à–µ
  // –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –∏.—Ç.–¥
  // —Ç–∞–∫–∂–µ –∑–∞–±–µ—Ä–∏—Ç–µ weathercode - –æ–Ω –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è

  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
async function getWeather() {
    try {
        // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
        const resLocation = await fetch("https://get.geojs.io/v1/ip/geo.json");
        const locationData = await resLocation.json();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ (–≥–æ—Ä–æ–¥, —à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)
        const { city, latitude, longitude } = locationData;
        console.log(`City: ${city}, Latitude: ${latitude}, Longitude: ${longitude}`);
        
        // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        const weatherRes = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true`);
        const weatherData = await weatherRes.json();
        
       // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        const { temperature, wind_speed, weathercode } = weatherData.current_weather;
        
        // –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        console.log(`Temperature: ${temperature}¬∞C, Wind Speed: ${wind_speed} km/h, Weather Code: ${weathercode}`);
    } catch (error) {
        console.error("Error fetching data:", error);
    }
}

// –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—â–∏–∫ –¥–ª—è –∫–æ–¥–∞ –ø–æ–≥–æ–¥—ã
  // –≤—ã–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ current_weather_units
  // –∑–∞–¥–µ–ø–ª–æ–π—Ç–µ –Ω–∞ git pages
  // —Å–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–¥ –∏ –Ω–∞ –¥–µ–ø–ª–æ–π

// https://open-meteo.com/en/docs

function decodeWeatherCode(code) {
    switch (code) {
      case 0:
        return { description: "Clear", icon: "‚òÄÔ∏è" };
      case 1:
        return { description: "Few clouds", icon: "üå§Ô∏è" };
      case 2:
        return { description: "Partly cloudy", icon: "‚õÖ" };
      case 3:
        return { description: "Cloudy", icon: "‚òÅÔ∏è" };
      case 45:
        return { description: "Fog", icon: "üå´Ô∏è" };
      case 48:
        return { description: "Frozen fog", icon: "üå´Ô∏è‚ùÑÔ∏è" };
      case 51:
        return { description: "Light rain", icon: "üåßÔ∏è" };
      case 53:
        return { description: "Moderate rain", icon: "üåßÔ∏è" };
      case 55:
        return { description: "Heavy rain", icon: "üåßÔ∏è" };
      case 56:
        return { description: "Freezing rain", icon: "‚ùÑÔ∏èüåßÔ∏è" };
      case 57:
        return { description: "Heavy freezing rain", icon: "‚ùÑÔ∏èüåßÔ∏è" };
      case 61:
        return { description: "Light rain with thunder", icon: "üåßÔ∏è‚ö°" };
      case 63:
        return { description: "Moderate rain with thunder", icon: "üåßÔ∏è‚ö°" };
      case 65:
        return { description: "Heavy rain with thunder", icon: "üåßÔ∏è‚ö°" };
      case 66:
        return { description: "Freezing rain with thunder", icon: "‚ùÑÔ∏èüåßÔ∏è‚ö°" };
      case 67:
        return { description: "Heavy freezing rain with thunder", icon: "‚ùÑÔ∏èüåßÔ∏è‚ö°" };
      case 71:
        return { description: "Light snow", icon: "‚ùÑÔ∏è" };
      case 73:
        return { description: "Moderate snow", icon: "‚ùÑÔ∏è" };
      case 75:
        return { description: "Heavy snow", icon: "‚ùÑÔ∏è" };
      case 77:
        return { description: "Hail", icon: "üå®Ô∏è" };
      case 80:
        return { description: "Light rain with thunder", icon: "üåßÔ∏è‚ö°" };
      case 81:
        return { description: "Moderate rain with thunder", icon: "üåßÔ∏è‚ö°" };
      case 82:
        return { description: "Heavy rain with thunder", icon: "üåßÔ∏è‚ö°" };
      case 85:
        return { description: "Light snow with thunder", icon: "‚ùÑÔ∏è‚ö°" };
      case 86:
        return { description: "Heavy snow with thunder", icon: "‚ùÑÔ∏è‚ö°" };
      default:
        return { description: "Unknown weather code", icon: "‚ùì" };
    }
  }
  async function getWeather() {
    const res = await fetch("https://get.geojs.io/v1/ip/geo.json");
    const data = await res.json();
    const { city, latitude, longitude } = data;
  
    const weatherRes = await fetch(
      `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true`
    );
    const weatherData = await weatherRes.json();
    const { temperature, windspeed, weathercode } = weatherData.current_weather;
    const { temperature: temperatureUnit, windspeed: windspeedUnit } =
      weatherData.current_weather_units;
  
    
    const { description, icon } = decodeWeatherCode(weathercode);
  
    
    document.body.innerHTML = `
      <h1>Weather in ${city}</h1>
      <p>Temperature: ${temperature} ${temperatureUnit}</p>
      <p>Wind speed: ${windspeed} ${windspeedUnit}</p>
      <p>Weather: ${description} ${icon}</p>
    `;
  }
  

getWeather();
